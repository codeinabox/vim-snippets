# suggestion? report bugs?
# please go to https://github.com/chrisyue/vim-snippets/issues
#
# to use add the following to your .vimrc
# `autocmd BufRead,BufNewFile,BufEnter *Test.php UltiSnipsAddFiletypes php-phpunit`
priority -50

snippet testcase "class XYZTest extends \PHPUnit_Framework_TestCase { ... }"
<?php

namespace `!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '\\')
`;

/**
 * @author `!v g:snips_author`
 */
class `!p
snip.rv = re.match(r'.*(?=\.)', fn).group()
` extends \PHPUnit_Framework_TestCase
{
	public function test${1}()
	{
		${0:${VISUAL}}
	}
}
endsnippet

snippet test "public function testXYZ() { ... }"
public function test${1}()
{
	${0:${VISUAL}}
}
endsnippet

snippet setup "protected function setUp() { ... }"
protected function setUp()
{
	${0:${VISUAL}}
}
endsnippet

snippet teardown "protected function tearDown() { ... }"
protected function tearDown()
{
	${0:${VISUAL}}
}
endsnippet

snippet exp "phpunit expects" i
expects($this->${1:once}())
	->method('${2}')
	->with($this->equalTo(${3})${4})
	->will($this->returnValue(${5}));
endsnippet

snippet testcmt "phpunit comment with group" b
/**
* @group ${1}
*/
endsnippet

snippet fail "$this->fail()"
$this->fail(${1});
endsnippet

snippet marki "$this->markTestIncomplete()"
$this->markTestIncomplete(${1});
endsnippet

snippet marks "$this->markTestSkipped()"
$this->markTestSkipped(${1});
endsnippet

snippet expe "$this->expectException(InvalidArgumentException::class)"
$this->expectException(${1});
endsnippet

snippet expo "$this->expectOutputString('foo')"
$this->expectOutputString(${1});
endsnippet

##############
# Assertions #
##############
snippet assertarray "$this->assertArrayHasKey($key, $array)"
$this->assertArrayHasKey(${1:$key}, ${2:$array});
endsnippet

snippet assertclass "$this->assertClassHasAttribute($attributeName, $className)"
$this->assertClassHasAttribute(${1:$attributeName}, ${2:$className});
endsnippet

snippet assertclass "phpunit assertClassHasStaticAttribute" i
$this->assertClassHasStaticAttribute(${1:$attributeName}, ${2:$className});
endsnippet

snippet assertcontains "phpunit assertContains" i
$this->assertContains(${1:$needle}, ${2:$haystack});
endsnippet

snippet assertcontains "phpunit assertContainsOnly" i
$this->assertContainsOnly(${1:$needle}, ${2:$haystack});
endsnippet

snippet assertcontains "phpunit assertContainsOnlyInstancesOf" i
$this->assertContainsOnlyInstancesOf(${1:$classname}, ${2:$haystack});
endsnippet

snippet assert "phpunit assertCount" i
$this->assertCount(${1:$expectedCount}, ${2:$haystack});
endsnippet

snippet assertarray "phpunit assertArraySubset" i
$this->assertArraySubset(${1:$subset}, ${2:$array});
endsnippet

snippet assert "phpunit assertEquals" i
$this->assertEquals(${1:$equals}, ${2:$actual});
endsnippet

snippet assert "phpunit assertNull" i
$this->assertNull(${1:$equals}, ${2:$actual});
endsnippet
